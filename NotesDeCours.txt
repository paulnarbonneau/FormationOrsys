
ng g m features/login -m=app --project=ng-ground
ng g m features/list -m=app --project=ng-ground
 ng g m shared -m=app --project=ng-ground
ng g m shared -m=features/list -f --project=ng-ground
ng g m shared -m=features/login -f --project=ng-ground

# On vire le app.component.* définis par défaut pour tout gérer dans le module main
ng g m main -m=app --routing --project=ng-ground

# on met l'option -it et -is pour ne pas cacher le build du composant et accelerer le build
ng g c components/cmp-button --project=ng-ground -it -is

ng g c components/cmp-header --project=ng-ground --export
ng g c components/cmp-searchbar --project=ng-ground --export
ng g c main/main --project=ng-ground --export
ng g c screens/screen-login --project=ng-ground --export
ng g c screens/screen-list --project=ng-ground --export

ng g c features/login/login --project=ng-ground --export
ng g c features/list/list --project=ng-ground --export




######
si un composant a besoin de faire appel à plusieurs services alors il faut créer un service de facade qui va orchestrer l'appel aux services

creer un service qui gere les transactions réseau, qui sera appele par tous les autres services

ng g s services/dispatcher --project=ng-ground
ng g s services/auth --project=ng-ground
ng g s services/data --project=ng-ground
ng g s services/storage --project=ng-ground


javadoc angular : npm i @compodoc/compodoc



provider un service au niveau d'un composant au lieu du niveau root est utile pour des fonctions partagées 
genre un fil de discussion


###Routes 

forRoot => on definit des routes pour le niveau 0 de l'appli /epargne /snd
forChild => on définit des routes pour un sous niveau /epargne/toto